import React, { createContext, useState, useContext, ReactNode, useCallback, useEffect } from 'react';
import axios from 'axios';
import { path } from '../../config';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { io, Socket } from 'socket.io-client';

// ƒê·ªãnh nghƒ©a nh·ªØng g√¨ Context s·∫Ω cung c·∫•p
type NotificationContextType = {
  unreadCount: number;
  setUnreadCount: (count: number) => void;
  fetchUnreadCount: () => Promise<void>;
};

// T·∫°o Context
const NotificationContext = createContext<NotificationContextType | undefined>(undefined);

// Bi·∫øn l∆∞u socket (ƒë·ªÉ n√≥ kh√¥ng b·ªã t·∫°o l·∫°i m·ªói l·∫ßn render)
let socket: Socket | null = null;

// T·∫°o Provider (c√°i b·ªçc)
export const NotificationProvider = ({ children }: { children: ReactNode }) => {
  const [unreadCount, setUnreadCount] = useState(0);

  // H√†m g·ªçi API ƒë·ªÉ l·∫•y s·ªë l∆∞·ª£ng (d√πng khi app m·ªõi m·ªü)
  const fetchUnreadCount = useCallback(async () => {
    try {
      const userId = await AsyncStorage.getItem("userId");
      if (!userId) {
        setUnreadCount(0); // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, count = 0
        return;
      }

      const response = await axios.get(`${path}/notifications/user/${userId}/unread-count`);
      if (response.data && typeof response.data.count === 'number') {
        setUnreadCount(response.data.count);
      }
    } catch (error) {
      console.error("L·ªói fetch unread count (HTTP):", error);
      setUnreadCount(0); // ƒê·∫∑t v·ªÅ 0 n·∫øu l·ªói
    }
  }, []);

  // ‚úÖ LOGIC K·∫æT N·ªêI SOCKET.IO (REAL-TIME)
  useEffect(() => {
    const setupSocket = async () => {
      const userId = await AsyncStorage.getItem("userId");
      if (!userId) {
        // N·∫øu kh√¥ng c√≥ user, kh√¥ng k·∫øt n·ªëi socket
        return;
      }

      // 1. K·∫øt n·ªëi t·ªõi server
      if (!socket) {
        socket = io(path); 
        console.log(`ƒêang k·∫øt n·ªëi Socket.IO t·ªõi ${path}...`);

        // 2. Khi k·∫øt n·ªëi th√†nh c√¥ng, g·ª≠i "ƒë·ªãnh danh"
        socket.on('connect', () => {
          // ‚úÖ S·ª¨A L·ªñI ·ªû ƒê√ÇY: Th√™m 'if (socket)'
          if (socket) { 
            console.log(`‚úÖ Socket ƒë√£ k·∫øt n·ªëi: ${socket.id}`);
            socket.emit('identify', { userId });
          }
        });

        // 3. L·∫ÆNG NGHE S·ª∞ KI·ªÜN PUSH T·ª™ SERVER
        socket.on('unread_count_update', (data: { count: number }) => {
          console.log(`üî• Nh·∫≠n ƒë∆∞·ª£c PUSH 'unread_count_update':`, data.count);
          setUnreadCount(data.count);
        });

        // (C√°c h√†m log l·ªói/ng·∫Øt k·∫øt n·ªëi)
        socket.on('disconnect', () => {
          console.log("Socket ƒë√£ ng·∫Øt k·∫øt n·ªëi.");
        });
        
        socket.on('connect_error', (err) => {
            console.error("L·ªói k·∫øt n·ªëi Socket.IO:", err.message);
        });
      }
    };

    setupSocket();

    // Cleanup khi component b·ªã h·ªßy (v√≠ d·ª•: logout)
    return () => {
      if (socket) {
        console.log("ƒêang ng·∫Øt k·∫øt n·ªëi socket...");
        socket.disconnect();
        socket = null;
      }
    };
  }, []); // Ch·ªâ ch·∫°y 1 l·∫ßn khi Provider ƒë∆∞·ª£c t·∫°o

  return (
    <NotificationContext.Provider value={{ unreadCount, setUnreadCount, fetchUnreadCount }}>
      {children}
    </NotificationContext.Provider>
  );
};

// T·∫°o Hook (ƒë·ªÉ d·ªÖ s·ª≠ d·ª•ng)
export const useNotification = () => {
  const context = useContext(NotificationContext);
  if (context === undefined) {
    throw new Error('useNotification ph·∫£i ƒë∆∞·ª£c d√πng b√™n trong NotificationProvider');
  }
  return context;
};