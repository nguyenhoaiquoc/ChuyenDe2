import React, { useState, useEffect } from "react";
import {
    View,
    Text,
    TouchableOpacity,
    ScrollView,
    FlatList,
    ActivityIndicator,
    Image,
    Alert,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";
import Menu from "../../components/Menu";
import "../../global.css";
import { NativeStackNavigationProp } from "@react-navigation/native-stack";
import { RootStackParamList, Notification, Product } from "../../types"; // üëà Nh·ªõ import Product
import { SafeAreaView } from "react-native-safe-area-context";
import axios from "axios";
import { path } from "../../config";
import AsyncStorage from "@react-native-async-storage/async-storage";

type Props = {
    navigation: NativeStackNavigationProp<
        RootStackParamList,
        "NotificationScreen"
    >;
};

const filters = ["T√†i kho·∫£n", "Giao d·ªãch", "Tin ƒëƒÉng", "S·ª± ki·ªán"];

export default function NotificationScreen({ navigation }: Props) {
    const [activeTab, setActiveTab] = useState("Ho·∫°t ƒë·ªông");

    // ¬†STATE M·ªöI ƒê·ªÇ L∆ØU DATA V√Ä LOADING
    const [notifications, setNotifications] = useState<Notification[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isNavigating, setIsNavigating] = useState(false)

    // ¬†USEEFFECT ƒê·ªÇ G·ªåI API (Code c·ªßa √¥ng)
    useEffect(() => {
        const fetchNotifications = async () => {
            try {
                setIsLoading(true);
                const userId = await AsyncStorage.getItem("userId");
                if (!userId) {
                    Alert.alert("L·ªói", "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
                    setIsLoading(false);
                    navigation.goBack();
                    return;
                }

                let tabQueryParam = '';
                if (activeTab === 'Tin t·ª©c') {
                    tabQueryParam = '?tab=news';
                }

                const apiUrl = `${path}/notifications/user/${userId}${tabQueryParam}`;
                console.log("Calling API:", apiUrl);

                const response = await axios.get(apiUrl);
                setNotifications(response.data);

                // ‚õîÔ∏è L·ªñI C≈®: √îng setNotifications 2 l·∫ßn
                // setNotifications(response.data); // üëà X√≥a d√≤ng n√†y ƒëi

            } catch (error: any) {
                console.error("L·ªói khi t·∫£i th√¥ng b√°o:", error.message);
                Alert.alert("L·ªói", "Kh√¥ng th·ªÉ t·∫£i danh s√°ch th√¥ng b√°o.");
            } finally {
                setIsLoading(false);
            }
        };

        fetchNotifications();
    }, [activeTab]);

    //  H√ÄM X·ª¨ L√ù KHI B·∫§M 
    const handleNotificationPress = async (item: Notification) => {
        if (isNavigating) return;
        setIsNavigating(true);

        const userId = await AsyncStorage.getItem("userId");

        try {
            if (!item.is_read) {
                await axios.patch(`${path}/notifications/${item.id}/read/user/${userId}`);
                setNotifications(prev =>
                    prev.map(n => n.id === item.id ? { ...n, is_read: true } : n)
                );
            }

            if (item.targetType?.name === 'product' && item.product?.id) {
                console.log(`ƒêang t·∫£i chi ti·∫øt s·∫£n ph·∫©m ${item.product.id}...`);

                const response = await axios.get(`${path}/products/${item.product.id}`);
                const fullProductData: Product = response.data;

                navigation.navigate('ProductDetail', { product: fullProductData });
            }
        } catch (error: any) {
            console.error("L·ªói khi x·ª≠ l√Ω th√¥ng b√°o:", error.response?.data || error.message);
            Alert.alert("L·ªói", "Kh√¥ng th·ªÉ m·ªü m·ª•c n√†y.");
        } finally {
            setIsNavigating(false);
        }
    };

    //  H√ÄM : X·ª¨ L√ù X√ìA T·∫§T C·∫¢
    const handleDeleteAll = async () => {
        // 1. L·∫•y userId
        const userId = await AsyncStorage.getItem("userId");
        if (!userId) {
            return Alert.alert("L·ªói", "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.");
        }

        try {
            // 2. G·ªçi API DELETE (endpoint √¥ng v·ª´a t·∫°o)
            await axios.delete(
                `${path}/notifications/user/${userId}`
            );
            
            // 3. X√≥a th√†nh c√¥ng, c·∫≠p nh·∫≠t UI
            setNotifications([]); // Set list r·ªóng

        } catch (error: any) {
            console.error("L·ªói khi x√≥a th√¥ng b√°o:", error.response?.data || error.message);
            Alert.alert("L·ªói", "Kh√¥ng th·ªÉ x√≥a th√¥ng b√°o.");
        }
    };

    //  H√ÄM  HI·ªÜN C·∫¢NH B√ÅO X√ÅC NH·∫¨N
    const showConfirmDeleteAlert = () => {
        Alert.alert(
            "X√≥a t·∫•t c·∫£ th√¥ng b√°o?",
            "H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.", 
            [
                {
                    text: "H·ªßy",
                    style: "cancel", 
                },
                {
                    text: "X√≥a",
                    onPress: handleDeleteAll, 
                    style: "destructive", 
                },
            ]
        );
    };

    //  H√ÄM RENDER ITEM 
    const renderNotificationItem = ({ item }: { item: Notification }) => {
        const formatMessage = (item: Notification) => {
            const actorName = <Text className="font-bold">{item.actor?.fullName || 'M·ªôt ng∆∞·ªùi'}</Text>;
            const productName = <Text className="font-bold">{item.product?.name || "b√†i ƒëƒÉng"}</Text>;

            switch (item.action?.name) {
                case 'post_success':
                    return <Text>B·∫°n ƒë√£ ƒëƒÉng th√†nh c√¥ng {productName}.</Text>;
                case 'admin_new_post':
                    return <Text>{actorName} v·ª´a ƒëƒÉng {productName}.</Text>;
                case 'favorite_product':
                    return <Text>{actorName} ƒë√£ th√≠ch {productName} c·ªßa b·∫°n.</Text>;
                case 'favorite_confirmation':
                    return <Text>B·∫°n ƒë√£ th√≠ch {productName}.</Text>;
                default:
                    return <Text>{actorName} ƒë√£ c√≥ m·ªôt ho·∫°t ƒë·ªông m·ªõi.</Text>;
            }
        };

        // ƒê√¢y l√† return c·ªßa renderNotificationItem
        return (
            <TouchableOpacity
                className={`flex-row items-start p-4 border-b border-gray-100 ${!item.is_read ? "bg-blue-50" : "bg-white"
                    }`}
                onPress={() => handleNotificationPress(item)}
                disabled={isNavigating}
            >
                <Image
                    source={{
                        uri: item.actor?.image
                            ? `${path}${item.actor.image}`
                            : "https://cdn-icons-png.flaticon.com/512/149/149071.png",
                    }}
                    className="w-10 h-10 rounded-full"
                />
                <View className="flex-1 ml-3">
                    <Text className="text-sm leading-5">{formatMessage(item)}</Text>
                    <Text className="text-xs text-gray-500 mt-1">
                        {new Date(item.createdAt).toLocaleDateString('vi-VN')}
                    </Text>
                </View>
                {!item.is_read && (
                    <View className="w-2.5 h-2.5 bg-blue-500 rounded-full ml-2 mt-1" />
                )}
            </TouchableOpacity>
        );
    }; // <-- K·∫øt th√∫c h√†m renderNotificationItem

    return (
        <SafeAreaView className="flex-1 bg-white mt-6">
            {/* Header */}
            <View className="flex-row items-center justify-between px-4 py-3 border-b border-gray-200">
                <TouchableOpacity onPress={() => navigation.goBack()}>
                    <Ionicons name="arrow-back" size={24} color="black" />
                </TouchableOpacity>
                <Text className="text-lg font-semibold">Th√¥ng b√°o</Text>
                <TouchableOpacity onPress={showConfirmDeleteAlert}> 
                    <Text className="text-sm text-red-500">X√≥a t·∫•t c·∫£</Text>
                </TouchableOpacity> 
                
            </View>

            {/* Tab Navigator */}
            <View className="flex-row">
                <TouchableOpacity
                    onPress={() => setActiveTab("Ho·∫°t ƒë·ªông")}
                    className={`flex-1 py-3 items-center ${activeTab === "Ho·∫°t ƒë·ªông"
                        ? "border-b-2 border-black"
                        : "border-b border-gray-200"
                        }`}
                >
                    <Text
                        className={`font-semibold ${activeTab === "Ho·∫°t ƒë·ªông"
                            ? "text-black"
                            : "text-gray-500"
                            }`}
                    >
                        Ho·∫°t ƒë·ªông
                    </Text>
                </TouchableOpacity>
                <TouchableOpacity
                    onPress={() => setActiveTab("Tin t·ª©c")}
                    className={`flex-1 py-3 items-center ${activeTab === "Tin t·ª©c"
                        ? "border-b-2 border-black"
                        : "border-b border-gray-200"
                        }`}
                >
                    <Text
                        className={`font-semibold ${activeTab === "Tin t·ª©c"
                            ? "text-black"
                            : "text-gray-500"
                            }`}
                    >
                        Tin t·ª©c
                    </Text>
                </TouchableOpacity>
            </View>

            {/* Filter Chips */}
            <View className="px-4 pt-4 pb-2 border-b border-gray-100">
                <ScrollView horizontal showsHorizontalScrollIndicator={false}>
                    <TouchableOpacity className="flex-row items-center bg-gray-100 px-3 py-1.5 rounded-full mr-2 border border-gray-200">
                        <Ionicons name="filter" size={16} color="#333" />
                        <Text className="ml-1 text-sm text-gray-800">L·ªçc</Text>
                    </TouchableOpacity>
                    {filters.map((filter) => (
                        <TouchableOpacity
                            key={filter}
                            className="bg-gray-100 px-3 py-1.5 rounded-full mr-2 border border-gray-200"
                        >
                            <Text className="text-sm text-gray-800">{filter}</Text>
                        </TouchableOpacity>
                    ))}
                </ScrollView>
            </View>

            {/* N·ªôi dung th√¥ng b√°o */}
            <View className="flex-1">
                {isLoading ? (
                    <View className="flex-1 items-center justify-center bg-gray-50/50">
                        <ActivityIndicator size="large" color="#007AFF" />
                    </View>
                ) : notifications.length === 0 ? (
                    <View className="flex-1 items-center justify-center bg-gray-50/50">
                        <Text className="text-gray-500">
                            Hi·ªán t·∫°i b·∫°n ch∆∞a c√≥ th√¥ng b√°o n√†o
                        </Text>
                    </View>
                ) : (
                    <FlatList
                        data={notifications}
                        renderItem={renderNotificationItem}
                        keyExtractor={(item) => item.id.toString()}
                        className="bg-white"
                    />
                )}
            </View>

            {/* Menu d∆∞·ªõi c√πng */}
            <Menu />
        </SafeAreaView>
    );

} // üëà D·∫•u "}" cu·ªëi c√πng c·ªßa component