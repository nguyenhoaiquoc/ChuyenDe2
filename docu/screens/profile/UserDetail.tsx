import React, { useState , useEffect  } from "react";
import {
  View,
  Text,
  Image,
  TouchableOpacity,
  ScrollView,
  Alert,
  Modal,
  Pressable,
} from "react-native";
import {
  Ionicons,
  MaterialIcons,
  FontAwesome5,
} from "@expo/vector-icons";
import * as Clipboard from "expo-clipboard";
import axios from "axios";
import { path } from "../../config";
import { useRoute, RouteProp } from "@react-navigation/native";
import AsyncStorage from "@react-native-async-storage/async-storage"; 

type InfoRowProps = {
  icon: React.ReactNode;
  label: string;
  value: string | React.ReactNode;
};

type UserProfileData = {
  id: number;
  fullName: string;
  email: string;
  image: string; 
  coverImage: string; 
  address_json: { full: string };
  createdAt: string;

};

interface MenuItem {
  id: number;
  label: string;
}

export default function UserProfile({ navigation }: any) {  
  // ‚úÖ B∆Ø·ªöC 1: L·∫§Y PARAMS
  const route = useRoute<RouteProp<{ params: { userId: number | string; productId: string } }>>();
  const { userId, productId } = route.params; // L·∫•y userId v√† productId t·ª´ trang tr∆∞·ªõc

  // ‚úÖ B∆Ø·ªöC 2: T·∫†O STATE V√Ä G·ªåI API
  const [user, setUser] = useState<UserProfileData | null>(null); // State ƒë·ªÉ l∆∞u info user
  const [loading, setLoading] = useState(true);

  const [selectedIds, setSelectedIds] = useState<number[]>([]);
  const [menuVisible, setMenuVisible] = useState(false);
  const [reportVisible, setReportVisible] = useState(false);

  const menuItems: MenuItem[] = [
    { id: 1, label: "H√¨nh ƒë·∫°i di·ªán s·∫£n ph·∫©m" },
    { id: 2, label: "Th√¥ng tin c√° nh√¢n sai ph·∫°m" },
    { id: 3, label: "Ng∆∞·ªùi b√°n c√≥ d·∫•u hi·ªáu l·ª´a ƒë·∫£o" },
    { id: 4, label: "L√Ω do kh√°c" },
  ];

  //  B∆Ø·ªöC 2 (ti·∫øp): G·ªåI API ƒê·ªÇ L·∫§Y TH√îNG TIN USER
  useEffect(() => {
    if (userId) {
      axios
        .get(`${path}/users/${userId}`) // Gi·∫£ s·ª≠ b·∫°n c√≥ API n√†y: GET /users/:id
        .then((res) => {
          setUser(res.data); // L∆∞u data user v√†o state
          setLoading(false);
        })
        .catch((err) => {
          console.log("L·ªói t·∫£i user profile:", err.message);
          Alert.alert("L·ªói", "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng n√†y.");
          setLoading(false);
          navigation.goBack();
        });
    }
  }, [userId]); // Ch·∫°y khi userId thay ƒë·ªïi

  const handleToggleSelect = (id: number) => {
    setSelectedIds((prev) =>
      prev.includes(id) ? prev.filter((i) => i !== id) : [...prev, id]
    );
  };

  // üõ∞ G·ª≠i b√°o c√°o th·∫≠t ho·∫∑c gi·∫£
const handleSubmitReport = async () => {
    if (selectedIds.length === 0) return;

    // L·∫•y reporter_id (ng∆∞·ªùi b√°o c√°o) t·ª´ storage
    const reporterId = await AsyncStorage.getItem("userId");
    if (!reporterId) {
      Alert.alert("L·ªói", "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ b√°o c√°o.");
      return;
    }

    const data = {
      product_id: productId, // ‚úÖ D√πng productId th·∫≠t
      reporter_id: Number(reporterId), // ‚úÖ D√πng ID ng∆∞·ªùi d√πng hi·ªán t·∫°i
      reported_user_id: userId, // ‚úÖ B√°o c√°o ng∆∞·ªùi d√πng n√†y
      reason: selectedIds
        .map((id) => menuItems.find((m) => m.id === id)?.label)
        .join(", "),
      created_at: new Date().toISOString(),
    };

    console.log(" D·ªØ li·ªáu g·ª≠i:", data);

  try {
      const res = await axios.post(`${path}/reports`, data, {
        headers: { "Content-Type": "application/json" },
      });

      if (res.status === 201 || res.status === 200) {
        Alert.alert(" Th√†nh c√¥ng", "B√°o c√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i!");
      } else {
        Alert.alert(" L·ªói", "M√°y ch·ªß ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá.");
      }
    } catch (error: any) {
      console.log(" L·ªói g·ª≠i b√°o c√°o:", error.response?.data || error.message);
      Alert.alert(
        "L·ªói",
        "Kh√¥ng th·ªÉ g·ª≠i b√°o c√°o. Ki·ªÉm tra l·∫°i m·∫°ng ho·∫∑c server backend."
      );
    }

    setReportVisible(false);
    setSelectedIds([]); // reset l·∫°i
  };

  const handleCopyLink = async () => {
    await Clipboard.setStringAsync("https://imsport.vn/user/congcong"); // B·∫°n c√≥ th·ªÉ c·∫≠p nh·∫≠t link n√†y
    setMenuVisible(false);
    Alert.alert("ƒê√£ sao ch√©p", "Li√™n k·∫øt h·ªì s∆° ƒë√£ ƒë∆∞·ª£c sao ch√©p.");
  };

  // H√†m t√≠nh th·ªùi gian tham gia
  const timeSince = (dateString: string): string => {
    if (!dateString) return "Ch∆∞a r√µ";
    const date = new Date(dateString);
    const seconds = Math.floor((new Date().getTime() - date.getTime()) / 1000);
    let interval = seconds / 31536000;
    if (interval >= 1) {
      return Math.floor(interval) + " nƒÉm";
    }
    interval = seconds / 2592000;
    if (interval >= 1) {
      return Math.floor(interval) + " th√°ng";
    }
    interval = seconds / 86400;
    if (interval >= 1) {
      return Math.floor(interval) + " ng√†y";
    }
    return "H√¥m nay";
  };

  // Hi·ªÉn th·ªã loading khi ch∆∞a c√≥ data
  if (loading) {
    return (
      <View className="flex-1 justify-center items-center">
        <Text>ƒêang t·∫£i h·ªì s∆°...</Text>
      </View>
    );
  }

  // ‚úÖ B∆Ø·ªöC 3: D√ôNG D·ªÆ LI·ªÜU TH·∫¨T
  // D√πng ·∫£nh b√¨a th·∫≠t
  const coverImageUrl = user?.coverImage
    ? { uri: user.coverImage.startsWith("http") ? user.coverImage : `${path}${user.coverImage}` }
    : require("../../assets/hoa.png"); // fallback

  // D√πng avatar th·∫≠t
  const avatarImageUrl = user?.image
    ? { uri: user.image.startsWith("http") ? user.image : `${path}${user.image}` }
    : require("../../assets/hoa.png"); // fallback

  return (
    <ScrollView className="flex-1 bg-white">
      {/* Header */}
      <View className="w-full h-36 bg-gray-100">
        <Image
          source={coverImageUrl}
          className="w-full h-full"
          resizeMode="contain"
        />
      </View>

      {/* Avatar */}
      <View className="items-center -mt-10">
        <Image
          source={avatarImageUrl}
          className="w-24 h-24 rounded-full border-4 border-white"
        />
      </View>

      <FontAwesome5
        name="arrow-left"
        size={20}
        color="#000"
        className="absolute top-10 left-5"
        onPress={() => navigation.goBack()}
      />

      {/* Info */}
      <View className="items-center mt-3"></View>
      <View className="flex-row items-center justify-between px-5 mt-4">
        <View className="items-center">
          <View className="items-start self-start mt-2 ">
            <Text className="text-lg font-semibold">
              {user?.fullName || "Ng∆∞·ªùi d√πng"}
            </Text>
            <Text className="text-gray-500 text-sm mt-1">Ch∆∞a c√≥ ƒë√°nh gi√°</Text>
            <Text className="text-gray-500 text-sm mt-1">
              Ng∆∞·ªùi theo d√µi:{" "}
              <Text className="text-black font-semibold">16</Text>
            </Text>
          </View>
        </View>

        {/* N√∫t h√†nh ƒë·ªông */}
        <View className="flex-row items-center space-x-2">
          <TouchableOpacity
            onPress={() => setMenuVisible(true)}
            className="bg-gray-100 w-10 h-10 rounded-lg items-center justify-center"
          >
            <MaterialIcons name="more-horiz" size={22} color="black" />
          </TouchableOpacity>

          <TouchableOpacity className="bg-orange-500 px-4 py-2 rounded-lg">
            <Text className="text-white font-medium">+ Theo d√µi</Text>
          </TouchableOpacity>

          {/* Modal b√°o c√°o */}
          <Modal
            visible={reportVisible}
            transparent
            animationType="fade"
            onRequestClose={() => setReportVisible(false)}
          >
            <Pressable
              className="flex-1 bg-black/40 justify-center items-center"
              onPress={() => setReportVisible(false)}
            >
              <Pressable
                onPress={(e) => e.stopPropagation()}
                className="bg-white w-80 rounded-2xl p-4"
              >
                <Text className="text-base font-semibold text-center mb-3">
                  Ng∆∞·ªùi b√°n n√†y c√≥ v·∫•n ƒë·ªÅ g√¨?
                </Text>

                {menuItems.map((itemmenu) => (
                  <TouchableOpacity
                    key={itemmenu.id}
                    onPress={() => handleToggleSelect(itemmenu.id)}
                    className={`py-2 border-b border-gray-200 rounded-md ${
                      selectedIds.includes(itemmenu.id) ? "bg-gray-200" : ""
                    }`}
                  >
                    <Text
                      className={`text-center ${
                        selectedIds.includes(itemmenu.id)
                          ? "text-black font-semibold"
                          : "text-gray-700"
                      }`}
                    >
                      {itemmenu.label}
                    </Text>
                  </TouchableOpacity>
                ))}

                {/* N√∫t g·ª≠i b√°o c√°o */}
                <TouchableOpacity
                  onPress={handleSubmitReport}
                  disabled={selectedIds.length === 0}
                  className={`mt-4 py-3 rounded-xl ${
                    selectedIds.length === 0
                      ? "bg-gray-300"
                      : "bg-red-500 active:bg-red-600"
                  }`}
                >
                  <Text
                    className={`text-center font-medium ${
                      selectedIds.length === 0
                        ? "text-gray-500"
                        : "text-white"
                    }`}
                  >
                    G·ª≠i b√°o c√°o
                  </Text>
                </TouchableOpacity>

                {/* N√∫t h·ªßy */}
                <TouchableOpacity
                  onPress={() => setReportVisible(false)}
                  className="mt-3 py-2 rounded-xl bg-gray-100"
                >
                  <Text className="text-center text-gray-700 font-medium">
                    H·ªßy
                  </Text>
                </TouchableOpacity>
              </Pressable>
            </Pressable>
          </Modal>
        </View>
      </View>

      {/* Menu popup ch√≠nh */}
      <Modal
        visible={menuVisible}
        transparent
        animationType="fade"
        onRequestClose={() => setMenuVisible(false)}
      >
        <Pressable
          className="flex-1 bg-black/40 justify-center items-center"
          onPress={() => setMenuVisible(false)}
        >
          <View className="bg-white w-64 rounded-2xl shadow-lg">
            <TouchableOpacity
              onPress={handleCopyLink}
              className="px-5 py-4 border-b border-gray-100"
            >
              <Text className="text-gray-700">Nh·∫Øn tin</Text>
            </TouchableOpacity>

            <TouchableOpacity
              onPress={() => {
                setMenuVisible(false);
                setReportVisible(true);
              }}
              className="px-5 py-4"
            >
              <Text className="text-red-500">B√°o c√°o vi ph·∫°m</Text>
            </TouchableOpacity>
          </View>
        </Pressable>
      </Modal>

      {/* Th√¥ng tin th√™m */}
      <View className="px-5 mt-6 space-y-3">
        <View className="flex-row items-center">
          <Ionicons name="chatbubbles-outline" size={18} color="gray" />
          <Text className="text-gray-700 text-base ml-2">Ph·∫£n h·ªìi chat:</Text>
          <Text className="text-gray-500 text-base ml-1">
            Th·ªânh tho·∫£ng (Ph·∫£n h·ªìi ch·∫≠m)
          </Text>
        </View>

        <View className="flex-row items-center">
          <Ionicons name="time-outline" size={18} color="gray" />
          <Text className="text-gray-700 text-base ml-2">ƒê√£ tham gia:</Text>
          {/* ‚úÖ S·ª¨A TH·ªúI GIAN TH·∫¨T */}
          <Text className="text-gray-500 text-base ml-1">
            {timeSince(user?.createdAt || "")}
          </Text>
        </View>

        <View className="flex-row items-center">
          <Ionicons name="location-outline" size={18} color="gray" />
          <Text className="text-gray-700 text-base ml-2">ƒê·ªãa ch·ªâ:</Text>
          <Text className="text-gray-700 text-base ml-2">ƒê·ªãa ch·ªâ:</Text>
          {/* ‚úÖ S·ª¨A ƒê·ªäA CH·ªà TH·∫¨T */}
          <Text
            className="text-gray-500 text-base ml-1 flex-shrink"
            numberOfLines={1}
            ellipsizeMode="tail"
          >
            {user?.address_json?.full || "Ch∆∞a r√µ ƒë·ªãa ch·ªâ"}
          </Text>
        </View>
      </View>

      <View className="h-10" />
    </ScrollView>
  );
}