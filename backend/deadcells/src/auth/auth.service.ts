import {
  Injectable,
  BadRequestException,
  UnauthorizedException,
} from '@nestjs/common';
import { RegisterDto } from './dto/register-user.dto';
import { LoginDto } from './dto/login.dto';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import * as bcrypt from 'bcrypt';
import { User } from 'src/entities/user.entity';
import { JwtService } from '@nestjs/jwt';
import { OtpVerification } from 'src/entities/otp-verification.entity';
import { MailService } from 'src/mail/mail.service';
import { v4 as uuidv4 } from 'uuid';
import { ResetPasswordDto } from './dto/reset-password.dto';

@Injectable()
export class AuthService {
  constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
    @InjectRepository(OtpVerification)
    private readonly otpRepository: Repository<OtpVerification>,
    private readonly jwtService: JwtService,
    private readonly mailService: MailService,
  ) {}

  async getUsers() {
    return this.userRepository.find();
  }

  /** ---------------- Register ---------------- */
  async register(dto: RegisterDto) {
    const existing = await this.userRepository.findOne({
      where: { email: dto.email },
    });

    if (existing && existing.is_verified) {
      throw new BadRequestException('Email ƒë√£ t·ªìn t·∫°i');
    }

    let user: User;
    const passwordHash = await bcrypt.hash(dto.password, 10);

    if (existing && !existing.is_verified) {
      // ‚úÖ KH√îNG xo√° hard; ch·ªâ c·∫≠p nh·∫≠t l·∫°i th√¥ng tin & regenerate OTP
      existing.fullName = dto.fullName;
      existing.phone = dto.phone ?? existing.phone;
      existing.passwordHash = passwordHash;
      user = await this.userRepository.save(existing);
    } else {
      user = this.userRepository.create({
        email: dto.email,
        passwordHash,
        fullName: dto.fullName,
        phone: dto.phone,
        roleId: 2, // m·∫∑c ƒë·ªãnh member
        statusId: existing?.statusId ?? 1, // tu·ª≥ h·ªá th·ªëng: 1 = active
      });
      user = await this.userRepository.save(user);
    }

    // üîê T·∫°o OTP x√°c minh: 6 ch·ªØ s·ªë, l∆∞u HASH
    const rawOtp = Math.floor(100000 + Math.random() * 900000).toString(); // 6 digits
    const otpHash = await bcrypt.hash(rawOtp, 10);
    const expiresAt = new Date(Date.now() + 1000 * 60 * 5); // 5 ph√∫t

    const otpEntity = this.otpRepository.create({
      user,
      otp_hash: otpHash,
      type: 'verify',
      used: false,
      expires_at: expiresAt,
    });
    await this.otpRepository.save(otpEntity);

    // G·ª≠i mail (g·ª≠i m√£ th√¥)
    await this.mailService.sendOTP(user.email, rawOtp);

    return { message: 'ƒêƒÉng k√Ω th√†nh c√¥ng. OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i v·ªÅ email' };
  }

  /** ---------------- Verify Email OTP ---------------- */
  async verifyOtp(email: string, otp: string) {
    const user = await this.userRepository.findOne({ where: { email } });
    // ƒê·ªÉ tr√°nh enumeration, c√≥ th·ªÉ tr·∫£ th√¥ng ƒëi·ªáp chung chung.
    if (!user) throw new BadRequestException('OTP kh√¥ng h·ª£p l·ªá');

    const otpRecord = await this.otpRepository.findOne({
      where: { user: { id: user.id }, type: 'verify', used: false },
      order: { created_at: 'DESC' },
    });
    if (!otpRecord) throw new BadRequestException('OTP kh√¥ng h·ª£p l·ªá');
    if (otpRecord.expires_at < new Date()) {
      throw new BadRequestException('OTP ƒë√£ h·∫øt h·∫°n');
    }

    const ok = await bcrypt.compare(otp, otpRecord.otp_hash);
    if (!ok) throw new BadRequestException('OTP kh√¥ng h·ª£p l·ªá');

    otpRecord.used = true;
    await this.otpRepository.save(otpRecord);

    // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c th·ª±c t√†i kho·∫£n
    user.is_verified = true;
    user.verifiedAt = new Date();
    await this.userRepository.save(user);

    return { message: 'X√°c th·ª±c th√†nh c√¥ng' };
  }

  /** ---------------- Login ---------------- */
  async login(dto: LoginDto) {
    const user = await this.userRepository.findOne({
      where: { email: dto.email },
      relations: ['role', 'status'],
    });

    // Tr√°nh l·ªô th√¥ng tin
    if (!user) throw new UnauthorizedException('Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');

    if (!user.is_verified) {
      throw new UnauthorizedException(
        'T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c OTP.',
      );
    }

    // (Tu·ª≥ ch·ªçn) ki·ªÉm tra tr·∫°ng th√°i b·ªã kho√°/banned theo statusId ho·∫∑c status.name

    const passwordValid = await bcrypt.compare(
      dto.password,
      user.passwordHash,
    );
    if (!passwordValid) {
      throw new UnauthorizedException('Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
    }

    const payload = { sub: user.id, email: user.email };
    const token = this.jwtService.sign(payload); // expiresIn c·∫•u h√¨nh t·∫°i JwtModule

    return {
      token,
      role: user.role?.name,
      fullName: user.fullName,
      id: user.id,
      tokenType: 'Bearer',
    };
  }

  /** ---------------- Forgot Password (send OTP) ---------------- */
  async forgotPassword(email: string) {
    // Tr√°nh enumeration: lu√¥n tr·∫£ v·ªÅ message trung t√≠nh
    const user = await this.userRepository.findOne({ where: { email } });
    if (user) {
      const rawOtp = Math.floor(100000 + Math.random() * 900000).toString(); // 6 digits
      const otpHash = await bcrypt.hash(rawOtp, 10);
      const expiresAt = new Date(Date.now() + 1000 * 60 * 5); // 5 ph√∫t

      const otpEntity = this.otpRepository.create({
        user,
        otp_hash: otpHash,
        type: 'reset',
        used: false,
        expires_at: expiresAt,
      });
      await this.otpRepository.save(otpEntity);

      await this.mailService.sendOTP(user.email, rawOtp);
    }

    return {
      message:
        'N·∫øu email t·ªìn t·∫°i, ch√∫ng t√¥i ƒë√£ g·ª≠i OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u t·ªõi h·ªôp th∆∞ c·ªßa b·∫°n.',
    };
  }

  /** ---------------- Verify Reset OTP -> c·∫•p reset token t·∫°m ---------------- */
  async verifyResetOtp(email: string, otp: string) {
    const user = await this.userRepository.findOne({ where: { email } });
    if (!user) throw new BadRequestException('OTP kh√¥ng h·ª£p l·ªá');

    const otpRecord = await this.otpRepository.findOne({
      where: { user: { id: user.id }, type: 'reset', used: false },
      order: { created_at: 'DESC' },
    });
    if (!otpRecord) throw new BadRequestException('OTP kh√¥ng h·ª£p l·ªá');
    if (otpRecord.expires_at < new Date()) {
      throw new BadRequestException('OTP ƒë√£ h·∫øt h·∫°n');
    }

    const ok = await bcrypt.compare(otp, otpRecord.otp_hash);
    if (!ok) throw new BadRequestException('OTP kh√¥ng h·ª£p l·ªá');

    otpRecord.used = true;
    await this.otpRepository.save(otpRecord);

    // üîê C·∫•p reset token t·∫°m: L∆ØU HASH + c√≥ h·∫°n
    const rawResetToken = uuidv4();
    user.resetTokenHash = await bcrypt.hash(rawResetToken, 10);
    user.resetTokenExpiresAt = new Date(Date.now() + 1000 * 60 * 15); // 15 ph√∫t
    await this.userRepository.save(user);

    return { resetToken: rawResetToken };
  }

  /** ---------------- Reset Password b·∫±ng token t·∫°m ---------------- */
  async resetPasswordWithDto(body: ResetPasswordDto) {
    const { email, token, newPassword } = body as any; // c·∫ßn dto c√≥ email

    const user = await this.userRepository.findOne({ where: { email } });
    if (
      !user ||
      !user.resetTokenHash ||
      !user.resetTokenExpiresAt ||
      user.resetTokenExpiresAt < new Date()
    ) {
      throw new BadRequestException('Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }

    const tokenOk = await bcrypt.compare(token, user.resetTokenHash);
    if (!tokenOk) {
      throw new BadRequestException('Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }

    // Kh√¥ng cho tr√πng m·∫≠t kh·∫©u c≈©
    const isSame = await bcrypt.compare(newPassword, user.passwordHash);
    if (isSame) {
      throw new BadRequestException(
        'M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi m·∫≠t kh·∫©u hi·ªán t·∫°i',
      );
    }

    // Hash & l∆∞u m·∫≠t kh·∫©u m·ªõi + xo√° reset token + ƒë√°nh d·∫•u th·ªùi ƒëi·ªÉm ƒë·ªïi m·∫≠t kh·∫©u
    user.passwordHash = await bcrypt.hash(newPassword, 10);
    user.passwordChangedAt = new Date();
    user.resetTokenHash = null;
    user.resetTokenExpiresAt = null;

    await this.userRepository.save(user);

    return { message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng' };
  }
}
