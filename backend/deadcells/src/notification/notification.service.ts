import { Injectable, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, Not } from 'typeorm';
import { Notification } from 'src/entities/notification.entity';
import { CreateNotificationDto } from './dto/create-notification.dto';
import { Product } from 'src/entities/product.entity';
import { NotificationAction } from 'src/entities/notification-action.entity';
import { TargetType } from 'src/entities/target-type.entity';

import { User } from 'src/entities/user.entity';

@Injectable()
export class NotificationService {
    private readonly logger = new Logger(NotificationService.name);
    constructor(
        @InjectRepository(Notification)
        private readonly notificationRepo: Repository<Notification>,
        @InjectRepository(NotificationAction)
        private readonly actionRepo: Repository<NotificationAction>,
        @InjectRepository(TargetType)
        private readonly targetTypeRepo: Repository<TargetType>,
        @InjectRepository(User)
        private readonly userRepo: Repository<User>,
    ) { }

    /**
     * H√†m n√†y ƒë∆∞·ª£c g·ªçi b·ªüi c√°c service kh√°c (CommentService, MessageService...)
     */
    async create(dto: CreateNotificationDto): Promise<Notification> {
        const newNotification = this.notificationRepo.create({
            user: { id: dto.userId },
            actor: { id: dto.actorId },
            action: { id: dto.actionId },
            targetType: { id: dto.targetTypeId },
            target_id: dto.targetId,
            product: dto.productId ? { id: dto.productId } : undefined,
            is_read: false,
        });

        return this.notificationRepo.save(newNotification);
    }

    // H√ÄM : Th√¥ng b√°o cho ch√≠nh ng∆∞·ªùi ƒëƒÉng
    async notifyUserOfPostSuccess(product: Product) {
        try {
            // L·∫•y ID t·ª´ DB (kh√¥ng "gi·∫£ s·ª≠" n·ªØa)
            const action = await this.actionRepo.findOneByOrFail({ name: 'post_success' });
            const targetType = await this.targetTypeRepo.findOneByOrFail({ name: 'product' });

            const dto: CreateNotificationDto = {
                userId: Number(product.user_id),
                actorId: Number(product.user_id),
                actionId: action.id,
                targetTypeId: targetType.id,
                targetId: product.id,
                productId: product.id,
            };
            await this.create(dto);

        } catch (error) {
            this.logger.error(`L·ªói t·∫°o th√¥ng b√°o post_success: ${error.message}`, error.stack);
        }
    }

    /**
   * 5. H√ÄM M·ªöI: Th√¥ng b√°o cho ch·ªß s·∫£n ph·∫©m khi c√≥ ng∆∞·ªùi th√≠ch
   */
    async notifyProductOwnerOfFavorite(actorId: number, productId: number, productOwnerId: number) {
        try {
            const action = await this.actionRepo.findOneByOrFail({ name: 'favorite_product' });
            const targetType = await this.targetTypeRepo.findOneByOrFail({ name: 'product' });

            const dto: CreateNotificationDto = {
                userId: productOwnerId, // Ng∆∞·ªùi nh·∫≠n l√† ch·ªß SP
                actorId: actorId,       // Ng∆∞·ªùi th·ª±c hi·ªán l√† ng∆∞·ªùi th·∫£ tim
                actionId: action.id,
                targetTypeId: targetType.id,
                targetId: productId,
                productId: productId,
            };
            await this.create(dto);

        } catch (error) {
            this.logger.error(`L·ªói t·∫°o th√¥ng b√°o favorite_product: ${error.message}`, error.stack);
        }
    }

    /**
     * 6. H√ÄM M·ªöI: G·ª≠i x√°c nh·∫≠n cho ng∆∞·ªùi v·ª´a th·∫£ tim
     */
    async notifyUserOfFavoriteConfirmation(actorId: number, productId: number) {
        try {
            const action = await this.actionRepo.findOneByOrFail({ name: 'favorite_confirmation' });
            const targetType = await this.targetTypeRepo.findOneByOrFail({ name: 'product' });

            const dto: CreateNotificationDto = {
                userId: actorId,         // Ng∆∞·ªùi nh·∫≠n l√† ng∆∞·ªùi th·∫£ tim
                actorId: actorId,        // Ng∆∞·ªùi th·ª±c hi·ªán c≈©ng l√† ng∆∞·ªùi th·∫£ tim
                actionId: action.id,
                targetTypeId: targetType.id,
                targetId: productId,
                productId: productId,
            };
            await this.create(dto);

        } catch (error) {
            this.logger.error(`L·ªói t·∫°o th√¥ng b√°o favorite_confirmation: ${error.message}`, error.stack);
        }
    }

    // h√†m x√≥a t·∫•t c·∫£ th√¥ng b√°o 
    async deleteAllForUser(userId: number) {
    try {
      // X√≥a t·∫•t c·∫£ b·∫£n ghi c√≥ user_id kh·ªõp
      const deleteResult = await this.notificationRepo.delete({
        user: { id: userId },
      });

      this.logger.log(`ƒê√£ x√≥a ${deleteResult.affected} th√¥ng b√°o cho user ${userId}`);
      return { message: 'ƒê√£ x√≥a t·∫•t c·∫£ th√¥ng b√°o.', count: deleteResult.affected };

    } catch (error) {
      this.logger.error(`L·ªói khi x√≥a th√¥ng b√°o cho user ${userId}: ${error.message}`, error.stack);
      throw error;
    }
}


    async deleteNotificationOnUnlike(actorId: number, productId: number, productOwnerId: number) {
    try {
      // 1. L·∫•y ID c√°c h√†nh ƒë·ªông
      const confirmAction = await this.actionRepo.findOneBy({ name: 'favorite_confirmation' });
      const productAction = await this.actionRepo.findOneBy({ name: 'favorite_product' });
      const targetType = await this.targetTypeRepo.findOneBy({ name: 'product' });

      if (!confirmAction || !productAction || !targetType) {
        this.logger.warn(`Kh√¥ng t√¨m th·∫•y action/target type ƒë·ªÉ x√≥a th√¥ng b√°o 'unlike'`);
        return;
      }

      // 2. X√≥a th√¥ng b√°o X√ÅC NH·∫¨N (c·ªßa ng∆∞·ªùi th·∫£ tim)
      await this.notificationRepo.delete({
        user: { id: actorId },
        actor: { id: actorId },
        action: { id: confirmAction.id },
        targetType: { id: targetType.id },
        target_id: productId,
      });

      // 3. X√≥a th√¥ng b√°o CHO CH·ª¶ B√ÄI (n·∫øu ng∆∞·ªùi tim kh√¥ng ph·∫£i l√† ch·ªß)
      if (actorId !== productOwnerId) {
        await this.notificationRepo.delete({
          user: { id: productOwnerId },
          actor: { id: actorId },
          action: { id: productAction.id },
          targetType: { id: targetType.id },
          target_id: productId,
        });
      }
      
      this.logger.log(`ƒê√£ x√≥a th√¥ng b√°o 'unlike' cho actor ${actorId} v√† product ${productId}`);

    } catch (error) {
      this.logger.error(`L·ªói khi x√≥a th√¥ng b√°o 'unlike': ${error.message}`, error.stack);
    }
  }

    // 4. H√ÄM : Th√¥ng b√°o cho (Admin)

    async notifyAdminsOfNewPost(product: Product) {
        try {
            // L·∫•y ID t·ª´ DB
            const action = await this.actionRepo.findOneByOrFail({ name: 'admin_new_post' });
            const targetType = await this.targetTypeRepo.findOneByOrFail({ name: 'product' });

            //  GI·∫¢ ƒê·ªäNH: Admin c√≥ role_id = 1 (√îng s·ª≠a s·ªë 1 n√†y n·∫øu c·∫ßn)
            const admins = await this.userRepo.findBy({ roleId: 1 });

            if (admins.length === 0) {
                this.logger.warn('Kh√¥ng t√¨m th·∫•y Admin (role_id=1) ƒë·ªÉ g·ª≠i th√¥ng b√°o.');
                return;
            }

            // T·∫°o th√¥ng b√°o cho t·ª´ng Admin
            const notifications = admins.map(admin => {
                // Kh√¥ng g·ª≠i th√¥ng b√°o n·∫øu Admin t·ª± ƒëƒÉng b√†i
                if (admin.id === product.user_id) return null;

                const dto: CreateNotificationDto = {
                    userId: admin.id,
                    actorId: Number(product.user_id),
                    actionId: action.id,
                    targetTypeId: targetType.id,
                    targetId: product.id,
                    productId: product.id,
                };
                return this.create(dto); // G·ªçi h√†m create
            });

            await Promise.allSettled(notifications.filter(n => n !== null));

        } catch (error) {
            this.logger.error(`L·ªói t·∫°o th√¥ng b√°o admin_new_post: ${error.message}`, error.stack);
        }
    }

    /**
     * L·∫•y t·∫•t c·∫£ th√¥ng b√°o cho m·ªôt ng∆∞·ªùi d√πng (v√≠ d·ª•: cho app React Native)
     */
    async getNotificationsForUser(userId: number, tab?: string): Promise<Notification[]> { // üëà Th√™m "tab?: string"

        // X√¢y d·ª±ng ƒëi·ªÅu ki·ªán WHERE c∆° b·∫£n
        const whereCondition: any = { user: { id: userId } };

        // Th√™m ƒëi·ªÅu ki·ªán l·ªçc d·ª±a tr√™n 'tab'
        if (tab === 'news') {
            // Ch·ªâ l·∫•y th√¥ng b√°o c√≥ action l√† 'admin_new_post'
            whereCondition.action = { name: 'admin_new_post' };
        } else {
            // M·∫∑c ƒë·ªãnh (tab 'activity'): L·∫•y c√°c th√¥ng b√°o KH√îNG ph·∫£i l√† 'admin_new_post'
            whereCondition.action = { name: Not('admin_new_post') }; //  D√πng Not()
        }

        return this.notificationRepo.find({
            where: whereCondition, // üëà S·ª≠ d·ª•ng ƒëi·ªÅu ki·ªán ƒë√£ x√¢y d·ª±ng
            relations: [
                'actor',
                'action',
                'product',
                'targetType',
            ],
            order: {
                createdAt: 'DESC',
            },
            take: 20,
        });
    }

    /**
     * ƒê√°nh d·∫•u m·ªôt th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
     */
    async markAsRead(notificationId: number, userId: number) {
        // C·∫≠p nh·∫≠t, nh∆∞ng ph·∫£i ƒë·∫£m b·∫£o th√¥ng b√°o n√†y l√† c·ªßa ƒë√∫ng user ƒë√≥
        return this.notificationRepo.update(
            { id: notificationId, user: { id: userId } },
            { is_read: true },
        );
    }





}