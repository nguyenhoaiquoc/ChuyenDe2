import { Body, Controller, Get, NotFoundException, Param, Post, Query } from "@nestjs/common";
import { ProductService } from "./product.service";
import { Product } from "src/entities/product.entity";

@Controller('products')
export class ProductController {
  constructor(private readonly productService: ProductService) { }

  // üß© T·∫°o s·∫£n ph·∫©m m·ªõi
  @Post()
  async create(@Body() body: Partial<Product>) {
    console.log("üî• Body nh·∫≠n t·ª´ frontend:", body);
    return await this.productService.create(body);
  }
  @Get(':id')
async getProductById(@Param('id') id: string) {
  const product = await this.productService.findById(+id);
  if (!product) throw new NotFoundException(`Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID ${id}`);
  return product;
}


  // üß© L·∫•y danh s√°ch s·∫£n ph·∫©m (c√≥ th·ªÉ l·ªçc theo category_id)
  @Get()
  async findAll(@Query('category_id') categoryId?: string) {
    console.log(
      "ƒêang g·ªçi GET /products",
      categoryId ? `with category_id=${categoryId}` : ''
    );

    // ‚ö° G·ªçi h√†m ƒë√£ format d·ªØ li·ªáu (ƒë√£ c√≥ subCategory, category, tag, v.v.)
    if (categoryId) {
      // N·∫øu c√≥ category_id ‚Üí l·ªçc theo danh m·ª•c cha
      const products = await this.productService.findByCategoryId(+categoryId);
      return await this.productService.formatProducts(products); // Format ri√™ng cho k·∫øt qu·∫£ l·ªçc
    }

    // N·∫øu kh√¥ng c√≥ filter ‚Üí l·∫•y t·∫•t c·∫£, ƒë√£ format s·∫µn
    return await this.productService.findAllFormatted();
  }
}
