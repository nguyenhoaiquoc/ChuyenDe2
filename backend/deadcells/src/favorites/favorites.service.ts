import { Entity } from 'typeorm';
import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Favorite } from '../entities/favorite.entity';

@Injectable()
export class FavoritesService {
  constructor(
    @InjectRepository(Favorite)
    private readonly favoriteRepo: Repository<Favorite>,
  ) {}

  /**
   * üöÄ Toggle tr·∫°ng th√°i y√™u th√≠ch cho m·ªôt s·∫£n ph·∫©m.
   * N·∫øu ƒë√£ th√≠ch -> B·ªè th√≠ch.
   * N·∫øu ch∆∞a th√≠ch -> Th√≠ch.
   */
  async toggleFavorite(userId: number, productId: number) {
    const existingFavorite = await this.favoriteRepo.findOne({
      where: { user_id: userId, product_id: productId },
    });

    if (existingFavorite) {
      // ƒê√£ t·ªìn t·∫°i -> X√≥a ƒëi (B·ªè th√≠ch)
      await this.favoriteRepo.remove(existingFavorite);
      return { favorited: false, message: 'ƒê√£ b·ªè y√™u th√≠ch s·∫£n ph·∫©m.' };
    } else {
      // Ch∆∞a t·ªìn t·∫°i -> T·∫°o m·ªõi (Th√≠ch)
      const newFavorite = this.favoriteRepo.create({
        user_id: userId,
        product_id: productId,
      });
      await this.favoriteRepo.save(newFavorite);
      return { favorited: true, message: 'ƒê√£ th√™m v√†o y√™u th√≠ch.' };
    }
  }

  /**
   * ‚úÖ ƒê·∫øm t·ªïng s·ªë l∆∞·ª£t y√™u th√≠ch c·ªßa m·ªôt s·∫£n ph·∫©m.
   */
  async countFavorites(productId: number): Promise<{ count: number }> {
    const count = await this.favoriteRepo.count({
      where: { product_id: productId },
    });
    return { count };
  }

  //L·∫•y danh s√°ch ID c√°c s·∫£n ph·∫©m m√† m·ªôt user ƒë√£ th√≠ch() ki·ªÉm tra isFavorite cho c·∫£ danh s√°ch s·∫£n ph·∫©m.)
  async getFavoriteProductIdsByUser(userId: number): Promise<number[]> {
    console.log(`[FavoritesService] ƒêang t√¨m l∆∞·ª£t th√≠ch cho userId: ${userId}`);
    const favorites = await this.favoriteRepo.find({
      where: { user_id: userId },
      select: ['product_id'], // Ch·ªâ l·∫•y c·ªôt product_id ƒë·ªÉ t·ªëi ∆∞u
    });
    console.log(
      `[FavoritesService] D·ªØ li·ªáu th√¥ t√¨m th·∫•y trong b·∫£ng favorites:`,
      favorites,
    );
    const productIds = favorites.map((fav) => fav.product_id);

    console.log(
      `[FavoritesService] Danh s√°ch ID s·∫£n ph·∫©m s·∫Ω tr·∫£ v·ªÅ:`,
      productIds,
    );

    return productIds;
  }

  async isFavorite(
    userId: number,
    productId: number,
  ): Promise<{ isFavorite: boolean }> {
    const existing = await this.favoriteRepo.findOne({
      where: { user_id: userId, product_id: productId },
    });

    return { isFavorite: !!existing };
  }
}
